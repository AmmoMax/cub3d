1. Проверить как open будет открывать файл если передавать в него путь к файлу с пробелами в конце.
2. Выделять память под каждую строку структуры.
3. Очищение памяти.


=== Ниже расположены замечания и заметки по различным вопросам ===
2. Особенности и проблемы парсинга самой карты.
	1. Карта со всех сторон должны быть окружена стенами, т.е. не должно быть дырок.
	2. Карта не может быть разделена пробелами
	3. Отдельная строка карты может содержать пробелы в начале, до стены.

	Таким образом, вот требования к валидной карте.
	1. Первая строка карты должна состоять из 1, т.к. представляет собой одну из внешних стен.
	2. Следующие, кроме последней, строки карты должны начинаться и заканчиваться на 1 - это стены с двух сторон.
		Внутри строка может содержать: 2, 0, N, S, E, W.
	3. Любая строка карты может содержать в начале пробелы, главное чтобы вся карты была окружена сплошной стеной со всех сторон.
	4. Последняя строка карты заканчивается символом EOF.

3. Видимо необходимо выделять память динамически под массив строк с картой, т.к. мы не знаем насколько большой может быть карта.

4. Как обрабатывать карту.

1. Обрабатываем самый простой вариант.
2. Научится обрабатывать пробелы в начале строк, с учетом сохранения сплошной стены вокруг карты
		1111111111111111111111111
		1000000000110000000000001
		1011000001110000002000001
		1001000000000000000000001
111111111011000001110000000000001
100000000011000001110111111111111
11110111111111011100000010001
11110111111111011101010010001
11000000110101011100000010001
10002000000000001100000010001
10000000000000001101010010001
10000001110101011111011110N0111
1111010011111010N11011110100001
111111111111111111111111111111 


Правило 1: Количество обязательных 1 в текущей строки должно быть +1 количеству пробелов в предыдущей строке.

Правило 2: Вторая и следующие строки(кроме последней) могу начинаться либо с пробела либо с 1

Первую строку проверяем чтобы она из любого количества пробелов после которых идут ВСЕ 1.
Вторая и следующие строки проверяют предыдущий символ этой же строки:
	Если текущий символ пробел и СПС(символ предыдущей строки) тоже пробел - пропускаем
	Если текущий символ = 1 и СПС = пробел и (текущий символ+1 = 1 или текущий символ+1 = конец строки) - пропускаем
	Если текущий символ = 1 и текущий символ+1 = \0 - пропускаем
	Если текущий символ 1 и (СПС = 1 или СПС = 0 или СПС = NWES или СПС = 2) - пропускаем
	Если текущий символ 0,2,N,W,E,S и СПС = пробел - ОШИБКА
	Если текущий символ 1 и текущий символ+1 = пробел и СПС = 1 - пропускаем
	Если текущий символ 0 и он соседствует с пробелом - ОШИБКА
	Если игрок соседствует с пробелом - ОШИБКА


Общий алгоритм парсинга и валидации карты.


        11111 1111111111111111111
        1000111100110000000000001
        1011110001110000002000001
        1001 100000000000000000011
1111111111011110001110000000000001
1000000000110000011101111111111111
11110111111111011100000010001
11110111111111011101010010001
11000000110101011100000010001
10002000000000001100000010001
10000000000000001101010010001
10001111110101011111011110N011111
11111  10011111010N11011110000001
  11 1111111111111111111111111111


        11111 1111111111111111111
        1000111100110000000000001
        1011110001110000002000001
        1001 100000000000000000011
111111111011110001110000000000001
1000000000110000011101111111111111
11111111111100000000111111111111
 110000001101010111000000100011
110002000000000011000000100011
1000000000N0000011010100100011
10001111110010101110111100011111
11111  10011110101110111100001
  11 11111111111111111111111111


  =========================================

  1. Отрисовывать плоскую карту из двумерного массива в основной структуре конфига.
  2. Запоминать позицию игрока и отмечать его отдельным квадратиком.
  3. 
  

  ==============================================================
  Отрисовка спрайтов.
  1. При парсинге карты запоминать координаты спрайтов и сохранять их в структуру.
  2. Скрывать кусок спрайта за стеной
	1. Для каждого луча сохранять расстояние до стены.
	2. При отрисовке каждого столбца спрайта проверять по индексу в массиве расстояние, если расстояние до спрайта больше чем до стены - не рисуем столбец.
  3. Отрисовывать несколько спрайтов(квадратов)
	1. При отрисовке перебирать все спрайты из сохраненного списка с координатами.
  4. Отсортировать по расстоянию от дальнего к ближнему.
  


  11111111111111111111111111111111111
10000111111111100000000000000000011
11001011101010201010100011010101101
11110000001111111111100010101010101
11111000000110011111000111111111111
11111111110000011111111111000000001
11111222010011111011111011001111111
11111111110001111111110110011111111
11111111110001111100000000011111111
10000000000000111000100011111111111
11111111100001111111000000000001111
1000E000002111111120000000000000011
11111111111111111111111111111111111


====================================================================
Что еще осталось допилить в проекте по ТЗ:
1. Проверить могу ли я подставить спрайт вместо стены. (done)
2. Читать из конфига цвета для пола и потолка (done)
3. Стрелки поворачивают взгляд (done)
4. WASD движение (done)
5. Обработка закрытия по нажатию Esc (done)
6. Обработка закрытия по крестику (done)
7. Если разрешение в конфиге больше чем разрешение экрана - задаем размер по текущему разрешению экрана (done)
8. В случае ошибок парсинга карты нужен вывод ошибок
9. Утечки
11. TODO просмотреть
12. Норминетт
13. Makefile и сборка проекта


====================
Очистка памяти.

Кто использует аллоцирование памяти.
read_config()		config_p - указатель на конфига
tex_parser()		str - указатель на строку с путем до текстуры
sprite_parser()		str - указатель на строку с путем до спрайта
color_parser()		ceiling_p - указатель на структуру с цветом потолка
color_parser()		floor_p - указатель на структуру с цветом пола
map_parser()		line_map - указатель на строку карты, которая добавляется в список
convert_map()		map - указатель на массив указателей с адресами строк двумерного массива
convert_map()		map[0] - указатель на первый адрес этого массива

g_engine()			world - указатель на общую структуру мира
g_engine()			world->dist_wall - указатель на массив расстояний до стен
load_textures_v2()	all_t - указатель на массив текстур в общей структуре мира
load_one_tex()		tex - указатель на конкретую текстуру
load_one_tex()		tex->tex_pix - указатель на интовый массив с цветами текстуры
load_sprite()		tex - указатель на структуру спрайта
load_sprite()		tex->tex_pix - указатель на интовый массив цветов из текстуры
new_sprite()		new - указатель на структуру спрайта как элемента односвязного списка



=================
Список ошибок:
	ERR_OK = 0,
	ERR_PARSE = -1,	
	ERR_MEMALLOC = -2	ошибка выделения памяти
	ERR_INVMAP = -3, 
	ERR_GET_SPRITES = -4,
	ERR_PARSE_TEX = -5,
	ERR_PARSE_SPRITE = -6,
	ERR_INVSPRITE = -7, 
	ERR_INVCOLOR = -8


write(2, "Error : Couldn't open file (FD)\n", 32) 				(done)
write(2, "Error : Couldn't parse file (GNL)\n", 34) 			(done)
write(2, "Error : Resolution specified twice\n", 35) 			(done)
write(2, "Error : Invalid resolution\n", 27) 					(done)
write(2, "Error : Floor/ceiling specified twice\n", 38) 
write(2, "Error : Invalid floor/ceiling line\n", 35) 
 write(2, "Error : Texture path specified twice\n", 37) 		(done)
write(2, "Error : Malloc fail (texture path)\n", 35) 
 write(2, "Error : Invalid texture image\n", 30) 
 write(2, "Error : Invalid line in file\n", 29) 				(done)
write(2, "Error : Malloc fail (map table)\n", 32) 
 write(2, "Error : Invalid map\n", 20) 
 write(2, "Error : Map isn't a rectangle\n", 30) 
write(2, "Error : No resolution specified\n", 32) 
write(2, "Error : Missing texture\n", 24) 
write(2, "Error : Missing floor/ceiling color\n", 26) 
 write(2, "Error : No starting position\n", 29) 
write(2, "Error : Multiple starting positions\n", 36) 
 write(2, "Error : Map isn't surrounded by walls\n", 38)